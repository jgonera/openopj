OPJ (Origin Project files) format description
=============================================

Author: Juliusz Gonera

This file contains a description of OPJ file format. It is incomplete
and contains only what was necessary for the author.

It is based on OPJ files generated by Origin 7 SR4 (7.0552) with [ITC200][]
addon (version 1.24.0.2, addon disk version 7.10).
Version of OPJ files: 4.2673, build: 552.

Some format information taken from [liborigin][], [liborigin2][]
and [SciDAVis][] [importOPJ][] filter in Python. If you need information on
OPJ sections not described in this document [importOPJ][] docs are a good
starting point.

If you update this document, please fork the repository and make a pull
request.

[ITC200]: http://www.microcal.com/products/itc/itc200.asp
[liborigin]: http://sourceforge.net/projects/liborigin/
[liborigin2]: http://soft.proindependent.com/liborigin2/
[SciDAVis]: http://scidavis.sourceforge.net/
[importOPJ]: https://scidavis.svn.sourceforge.net/svnroot/scidavis/branches/origin_import/importOPJ


General observations
--------------------

* Files are divided into fragments sperated by line feeds (0x0A).
* Numbers are little endian.


### Blocks

4-byte fragments usually indicate the size (uint32) of the following fragment.
Such a 4-byte fragment and a following fragment together form a block.

Sometimes there are 4-byte fragments filled with 0s. There is no zero-length
fragment following them. Such a single 0 size fragment is called a null block.

Null blocks seem to serve as a separator of file sections (especially lists,
i.e. sections that contain other sections) and can appear in groups (often of
2 or 3, sometimes 5) if several nested sections end.

In block descriptions the relative offsets refer to the offset in the second
fragment. Likewise, the size of a block is the size of the second fragment.


File structure
--------------

Accoring to [importOPJ][] OPJ files are divided into the following sections:

    Signature string
    Header
    Data list
        Data sections
    Window list
        Window sections
            Layer list
                Layer sections
                    Sublayer list
                        Sublayer sections
                    Curve list
                        Curve sections
                    AxisBreak list
                        AxisBreak sections
                    3 AxisParameter lists
                        AxisParameter sections
    Parameters section
    Note list
        Note sections
    Project tree
        Folder tree
            File list
                File sections
            Folder list
                Folder trees
    Attachment list
        Attachment-1 sublist
            Attachment-1 sections
        Attachment-2 sublist
            Attachment-2 sections

Lists are always terminated with a null block (`0A 00 00 00 00 0A`).


### Signature

A string containing three values separated by spaces (0x20) and terminated
with a line feed (0x0A).

    0x0000, 4 chars
        Magic identifier terminated with space, always "CPYA"?
    0x0005, 5 chars
        File version in MAJOR.MINOR format terminated with space
    0x000C, 4 chars (not constant?)
        Origin build number terminated with "#"


### Header

Since Origin 6.1 contains Origin version (acc. to [importOPJ][]). Consists of
two blocks: one with data and one null block. The data block is as follows:

    0x0000, 27 bytes
        Unknown.
    0x001B, 8 bytes, double
        Origin version + build/10000 (e.g. 7.0552 is 7.0 build 552).
    0x0023, 4 bytes
        Unknown


### Data list

Data list contains multiple data sections one after another.


#### Data section

Data section consists of three blocks: header, content and a null block. It can
contain worksheet column values, matrix or graph data. liborigin calls each
data section a "column".

There is a separate data section for each worksheet column. In case of
matrices, the values are stored in row-major order.

In case of excels, the content block is empty (0 size block). The excel data
is probably stored as attachments at the end of the file.


##### Data header block

Each data header block is prepended with a 0 size block and a following size
block. Size seems to be always 123.

The data header block itself has the following structure:

    0x0000, 22 bytes
        Unknown.
    0x0016, 2 bytes, uint16
        dataType (liborigin). Known flags:
        0x100: indicates that values are Text & Numeric
        0x800: indicates that values are integers (i.e. Long or Integer)
    0x0018, 1 byte, uint8
        dataType2 (importOPJ).
    0x0019, 4 bytes, uint32
        totalRows (importOPJ).
    0x001D, 4 bytes, uint32
        firstRow (importOPJ).
    0x0021, 4 bytes, uint32
        lastRow (importOPJ).
    0x0025, 24 bytes
        Unknown.
    0x003D, 1 byte, uint8
        valueSize, size of a single data value.
    0x003E, 1 byte
        Unknown.
    0x003F, 1 byte, uint8
        dataTypeU (liborigin).
    0x0040, 24 bytes
        Unknown.
    0x0058, 25 bytes, zero-padded string
        Data name, for worksheets it's "WORKSHEET_COLUMN". Column is at most
        18 chars long, remaining characters are used for "_", terminating null
        byte and worksheet name which may be truncated if too long.
    0x0071, 2 bytes, uint16
        dataType3 (importOPJ).
    0x0073, 8 bytes
        Unknown. Always zeros?

According to [importOPJ][] the bytes starting at 0x0071 didn't exist before
Origin 5.0.


##### Data content block

The data content block consists of consecutive values (e.g. consecutive rows in
a worksheet column). The number of rows is `totalRows`. `firstRow` indicates
the first non-empty row (0 is the first row) and `lastRow` indicates the last
non-empty row.

It should be enough to parse the values up to `lastRow` and skip the remaining
ones.

Each value is of size indicated by `valueSize` (i.e. the whole block size is
`valueSize * totalRows`).

The format of the value seems to depend on `valueSize` and `dataType`:

    valueSize = 1: int8
    valueSize = 2: int16
    valueSize = 4: int32 or float
    valueSize = 8: double
    valueSize > 8: Text
    valueSize > 8 and dataType & 0x100: Text and Numeric

According to [liborigin][] `dataTypeU = 8` means that an integer value is
unsigned (this is not verified).

In case of Text values, the value is a null-terminated string. The bytes after
the null are garbage or earlier contents of the value and can be disregarded.

Text and Numeric values can contain either a double or a string. In this case
the first two bytes of the value are treated as a prefix. If the first byte is
equal 0, the value is a double, if it's 1, the value is a string. The second
prefix byte seems to be always 0. The actual value starts after those two bytes
and its size is `valueSize - 2`.

`valueSize = 1` seems to be rare or non-existent, at least in Origin 7.0552.


### Window list

As of now, the description of window list and its subsections is incomplete
and merely serves as an indication of how to skip to the parameters section.

    Window list
        Window sections
            1 block
            Layer list
                Layer sections
                    1 block
                    Sublayer list
                        Sublayer sections
                            4 blocks
                            (maybe additional nesting according to importOPJ)
                    Curve list
                        Curve sections
                            2 blocks
                    AxisBreak list
                        AxisBreak sections
                            1 block
                    3 AxisParameter lists
                        AxisParameter sections
                            1 block


#### Window section

Window section contains a header block and a layer list. The header has the
following structure:

    0x0000, 2 bytes
        Unknown, always zero?
    0x0002, 25 bytes, zero-padded string
        Name.
    0x001B, n bytes
        See importOPJ for details.


### Parameters section

This section does not contain blocks. Instead it contains an arbitrary number
of parameter elements. Each element consists of:

    0x0000, n characters
        Parameter name.
    n, 1 byte
        Line feed.
    n+1, 8 bytes, double
        Parameter value.
    n+9, 1 byte
        Line feed.

The last parameter element is followed by a 0 byte and a line feed (`00 0A`),
i.e. if you encounter a parameter name equal to "\0", there are no more
parameter elements.

The section ends with a null block (or possibly it's another section which is
usually empty).


### Note list

Note list contains multiple note sections one after another.


#### Note section

Note sections are composed of three blocks: header, name and contents. Header's
structure is unknown and, as of now, it can be skipped. Name and contents both
are blocks which contain a null-terminated string.

